################################################
###                                          ###
### THIS FILE IS AUTOGENERATED. DO NOT EDIT. ###
###                                          ###
################################################

# Builds and tests a pull request

name: Build and test

# Arguments:
# event_name: pull_request
# event_cond: true
# trigger: -not-available-  # not available via repository_dispatch (we'd need a way to specify which pull request we want tested; not obvious if that's possible)


on:
  repository_dispatch:
  pull_request:
    branches:
      - master

jobs:
  check_version:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04]
        python-version: [3.9.12]
        pytorch-version: [1.11.0]
    
    steps:
    - name: Checkout code
      if: ((github.event_name == 'pull_request' && (true)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger -not-available- ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-18.04') && matrix.os == 'ubuntu-18.04') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || (contains(github.event.action, '-pv 3.8.2') && matrix.python-version == '3.8.2') || (contains(github.event.action, '-pv 3.9.12') && matrix.python-version == '3.9.12')  || contains(github.event.action, '-pv *'))))
      uses: actions/checkout@v1

    - name: Install Python
      if: ((github.event_name == 'pull_request' && (true)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger -not-available- ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-18.04') && matrix.os == 'ubuntu-18.04') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || (contains(github.event.action, '-pv 3.8.2') && matrix.python-version == '3.8.2') || (contains(github.event.action, '-pv 3.9.12') && matrix.python-version == '3.9.12')  || contains(github.event.action, '-pv *'))))
      uses: actions/setup-python@v1
      with:
        python-version: '3.7'

    - name: Check version
      if: ((github.event_name == 'pull_request' && (true)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger -not-available- ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-18.04') && matrix.os == 'ubuntu-18.04') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || (contains(github.event.action, '-pv 3.8.2') && matrix.python-version == '3.8.2') || (contains(github.event.action, '-pv 3.9.12') && matrix.python-version == '3.9.12')  || contains(github.event.action, '-pv *'))))
      run: |
        python -c "import itertools as it
        import re
        import subprocess
        import sys
        import metadata
        version_msg = subprocess.run('pip install --use-deprecated=legacy-resolver signatory==', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print('Version msg: ', version_msg)
        version_re = re.compile(rb'from versions: ([0-9\. ,]*)\)')
        last_version = version_re.search(version_msg.stderr).group(1).split(b', ')[-1]
        print('(Raw) last version: ', last_version)
        print('(Raw) this version: ', metadata.version)
        last_version_ = [int(i) for i in last_version.split(b'.')]
        this_version_ = [int(i) for i in metadata.version.split('.')]
        print('(As int) last version: ', last_version_)
        print('(As int) this version: ', this_version_)
        last_version__ = tuple(l for t, l in it.zip_longest(this_version_, last_version_, fillvalue=0))
        this_version__ = tuple(t for t, l in it.zip_longest(this_version_, last_version_, fillvalue=0))
        print('(Final) last version: ', last_version__)
        print('(Final) this version: ', this_version__)
        sys.exit(this_version__ <= last_version__)
        "


  check_readme:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04]
        python-version: [3.9.12]
        pytorch-version: [1.11.0]
    
    steps:
    - name: Checkout code
      if: ((github.event_name == 'pull_request' && (true)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger -not-available- ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-18.04') && matrix.os == 'ubuntu-18.04') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || (contains(github.event.action, '-pv 3.8.2') && matrix.python-version == '3.8.2') || (contains(github.event.action, '-pv 3.9.12') && matrix.python-version == '3.9.12')  || contains(github.event.action, '-pv *'))))
      uses: actions/checkout@v1

    - name: Install Python
      if: ((github.event_name == 'pull_request' && (true)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger -not-available- ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-18.04') && matrix.os == 'ubuntu-18.04') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || (contains(github.event.action, '-pv 3.8.2') && matrix.python-version == '3.8.2') || (contains(github.event.action, '-pv 3.9.12') && matrix.python-version == '3.9.12')  || contains(github.event.action, '-pv *'))))
      uses: actions/setup-python@v1
      with:
        python-version: '3.7'

    - name: Compare READMEs
      if: ((github.event_name == 'pull_request' && (true)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger -not-available- ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-18.04') && matrix.os == 'ubuntu-18.04') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || (contains(github.event.action, '-pv 3.8.2') && matrix.python-version == '3.8.2') || (contains(github.event.action, '-pv 3.9.12') && matrix.python-version == '3.9.12')  || contains(github.event.action, '-pv *'))))
      run: |
        cp README.rst README.rst.old
        python command.py readme
        python -c "import io
        import sys
        readme = io.open('README.rst', 'r', encoding='utf-8')
        readme_old = io.open('README.rst.old', 'r', encoding='utf-8')
        sys.exit(readme.read() != readme_old.read())
        "

  check_workflows:
      runs-on: ${{ matrix.os }}
      strategy:
        matrix:
          os: [ubuntu-18.04]
          python-version: [3.9.12]
          pytorch-version: [1.11.0]
      
      steps:
      - name: Checkout code
        if: ((github.event_name == 'pull_request' && (true)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger -not-available- ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-18.04') && matrix.os == 'ubuntu-18.04') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || (contains(github.event.action, '-pv 3.8.2') && matrix.python-version == '3.8.2') || (contains(github.event.action, '-pv 3.9.12') && matrix.python-version == '3.9.12')  || contains(github.event.action, '-pv *'))))
        uses: actions/checkout@v1

      - name: Install Python
        if: ((github.event_name == 'pull_request' && (true)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger -not-available- ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-18.04') && matrix.os == 'ubuntu-18.04') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || (contains(github.event.action, '-pv 3.8.2') && matrix.python-version == '3.8.2') || (contains(github.event.action, '-pv 3.9.12') && matrix.python-version == '3.9.12')  || contains(github.event.action, '-pv *'))))
        uses: actions/setup-python@v1
        with:
          python-version: '3.7'

      - name: Compare Workflows
        if: ((github.event_name == 'pull_request' && (true)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger -not-available- ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-18.04') && matrix.os == 'ubuntu-18.04') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || (contains(github.event.action, '-pv 3.8.2') && matrix.python-version == '3.8.2') || (contains(github.event.action, '-pv 3.9.12') && matrix.python-version == '3.9.12')  || contains(github.event.action, '-pv *'))))
        run: |
          cp .github/workflows/build.yml .github/workflows/build.yml.old
          cp .github/workflows/deploy.yml .github/workflows/deploy.yml.old
          cp .github/workflows/log_dispatch.yml .github/workflows/log_dispatch.yml.old
          cp .github/workflows/test_deployed.yml .github/workflows/test_deployed.yml.old
          python command.py workflows
          python -c "import io
          import sys
          build = io.open('.github/workflows/build.yml', 'r', encoding='utf-8')
          build_old = io.open('.github/workflows/build.yml.old', 'r', encoding='utf-8')
          deploy = io.open('.github/workflows/deploy.yml', 'r', encoding='utf-8')
          deploy_old = io.open('.github/workflows/deploy.yml.old', 'r', encoding='utf-8')
          log_dispatch = io.open('.github/workflows/log_dispatch.yml', 'r', encoding='utf-8')
          log_dispatch_old = io.open('.github/workflows/log_dispatch.yml.old', 'r', encoding='utf-8')
          test_deployed = io.open('.github/workflows/test_deployed.yml', 'r', encoding='utf-8')
          test_deployed_old = io.open('.github/workflows/test_deployed.yml.old', 'r', encoding='utf-8')
          result = (build.read() == build_old.read()) and (deploy.read() == deploy_old.read()) and (log_dispatch.read() == log_dispatch_old.read()) and (test_deployed.read() == test_deployed_old.read())
          sys.exit(not result)
          "

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2016, ubuntu-18.04]
        python-version: [3.7.0, 3.8.2, 3.9.12]
        pytorch-version: [1.10.0, 1.10.1, 1.11.0]
      fail-fast: false
    needs: [check_version, check_readme, check_workflows]
    steps:
    - name: Checkout code
      if: ((github.event_name == 'pull_request' && (true)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger -not-available- ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-18.04') && matrix.os == 'ubuntu-18.04') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || (contains(github.event.action, '-pv 3.8.2') && matrix.python-version == '3.8.2') || (contains(github.event.action, '-pv 3.9.12') && matrix.python-version == '3.9.12')  || contains(github.event.action, '-pv *'))))
      uses: actions/checkout@v1
      
    - name: Install Python
      if: ((github.event_name == 'pull_request' && (true)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger -not-available- ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-18.04') && matrix.os == 'ubuntu-18.04') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || (contains(github.event.action, '-pv 3.8.2') && matrix.python-version == '3.8.2') || (contains(github.event.action, '-pv 3.9.12') && matrix.python-version == '3.9.12')  || contains(github.event.action, '-pv *'))))
      uses: actions/setup-python@v1
      with:
        python-version: '3.7'

    - name: Windows
      if: ((github.event_name == 'pull_request' && (true)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger -not-available- ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-18.04') && matrix.os == 'ubuntu-18.04') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || (contains(github.event.action, '-pv 3.8.2') && matrix.python-version == '3.8.2') || (contains(github.event.action, '-pv 3.9.12') && matrix.python-version == '3.9.12')  || contains(github.event.action, '-pv *')))) && (matrix.os == 'windows-2016')
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
      shell: cmd
      # && chaining seems to be the best (only?) way to run multiple commands in a cmd shell
      # It also means that if any command fails then the step as a whole should correctly
      # have a nonzero (fail) return code
      run: >
        "C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/VC/Auxiliary/Build/vcvars64.bat" &&
        SET DISTUTILS_USE_SDK=1 &&
        %CONDA%/Scripts/conda create -n myenv python=%PYTHON_VERSION% -y &&
        %CONDA%/Scripts/activate myenv &&
        python -m pip install --upgrade pip &&
        conda install pytorch==${{ matrix.pytorch-version }} cpuonly -c pytorch -y &&
        python command.py should_not_import &&
        python setup.py egg_info --tag-build=".${{ matrix.pytorch-version }}" bdist_wheel &&
        python command.py should_not_import &&
        for %%f in (./dist/*) do (python -m pip install ./dist/%%~nxf) &&
        python -m pip install numpy &&
        python -m pip install iisignature pytest &&
        python -c "import os;
        import subprocess;
        import sys;
        print(sys.version);
        returncode_test = subprocess.Popen('python command.py test', shell=True).wait();
        returncode_version = sys.version[:5] != os.environ['PYTHON_VERSION'][:5];
        sys.exit(max(returncode_test, returncode_version))
        " &&
        echo done

    - name: Linux
      if: ((github.event_name == 'pull_request' && (true)) || (github.event_name == 'repository_dispatch' && contains(github.event.action, '-trigger -not-available- ') && ((contains(github.event.action, '-os windows-2016') && matrix.os == 'windows-2016') || (contains(github.event.action, '-os ubuntu-18.04') && matrix.os == 'ubuntu-18.04') || contains(github.event.action, '-os *')) && ((contains(github.event.action, '-pv 3.7.0') && matrix.python-version == '3.7.0') || (contains(github.event.action, '-pv 3.8.2') && matrix.python-version == '3.8.2') || (contains(github.event.action, '-pv 3.9.12') && matrix.python-version == '3.9.12')  || contains(github.event.action, '-pv *')))) && (matrix.os == 'ubuntu-18.04')
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
      # Deliberately only creating an sdist; see FAQ
      run: |
        set -x
        . $CONDA/etc/profile.d/conda.sh
        conda create -n myenv python=$PYTHON_VERSION -y
        conda activate myenv
        python -m pip install --upgrade pip
        conda install pytorch==${{ matrix.pytorch-version }} -c pytorch -y
        python command.py should_not_import
        python setup.py egg_info --tag-build=".${{ matrix.pytorch-version }}" sdist
        python command.py should_not_import
        SIGNATORY_INSTALLED=$(python -c "import os
        import sys
        x = os.listdir('dist')
        print(x[0])
        sys.exit(len(x) != 1)")
        python -m pip install ./dist/$SIGNATORY_INSTALLED
        python -m pip install numpy
        python -m pip install iisignature pytest
        python -c "import os
        import subprocess
        import sys
        print(sys.version)
        returncode_test = subprocess.Popen('python command.py test', shell=True).wait()
        returncode_version = sys.version[:5] != os.environ['PYTHON_VERSION'][:5]
        sys.exit(max(returncode_test, returncode_version))
        " 
      

# TODO: re-enable mac support
#    - <#<setup_mac>>
#      <#<build_mac>>
#      <#<install_local_mac>>
#      <#<test_mac>>
#      <#<terminate_mac>>

